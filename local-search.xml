<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>光通信NRZ CMI编译码实验</title>
    <link href="/2023/06/01/%E5%85%89%E9%80%9A%E4%BF%A1NRZ-CMI%E7%BC%96%E8%AF%91%E7%A0%81%E5%AE%9E%E9%AA%8C/"/>
    <url>/2023/06/01/%E5%85%89%E9%80%9A%E4%BF%A1NRZ-CMI%E7%BC%96%E8%AF%91%E7%A0%81%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>NRZ码：0表示低电平，1表示高电平</p><p>cmi编码规则：01表示“0”，00/11交替表示“1”</p><blockquote><p>FPGA电路仿真的输入输出信号即各测试点信号要求如下：</p><p>输入：系统时钟信号（7.68MHz） ：1路；</p><p>输出：周期15位二进制后四位学号序列：</p><p>1路；(480Kbps)</p><p>CMI编码输出信号： 1路；</p><p>CMI译码输出信号： 1路；</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>NRZ码比较简单，用一个状态机即可控制15位学号序列输出即可。</p><p>CMI编码这里得考虑用到双时钟。如果nrz编码和cmi编码用一个时钟：</p><ul><li>应当考虑用双边沿（但是Quartus中居然不能用双边沿的语法）。</li><li>不用双边沿，cmi编码的时间点会不断地延后于nrz码，越拖越长，显然不符合系统要求。</li></ul><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h4 id="时钟分频"><a href="#时钟分频" class="headerlink" title="时钟分频"></a>时钟分频</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//clk是7.68M的时钟</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)  <span class="hljs-comment">//产生480k时钟</span><br>    <span class="hljs-keyword">if</span>(counter1 == <span class="hljs-number">3&#x27;d7</span> ) <span class="hljs-comment">//16分频</span><br>        <span class="hljs-keyword">begin</span><br>            counter1           &lt;= <span class="hljs-number">3&#x27;d0</span>;<br>            clk_1              &lt;= ~clk_1;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        counter1               &lt;= counter1 + <span class="hljs-number">1&#x27;d1</span>;<br><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)   <span class="hljs-comment">//产生960k时钟</span><br>    <span class="hljs-keyword">if</span>(counter2 == <span class="hljs-number">2&#x27;d3</span> ) <span class="hljs-comment">//8分频</span><br>        <span class="hljs-keyword">begin</span><br>            counter2           &lt;= <span class="hljs-number">2&#x27;d0</span>;<br>            clk_2              &lt;= ~clk_2;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>         counter2              &lt;= counter2 + <span class="hljs-number">1&#x27;d1</span>;<br></code></pre></td></tr></table></figure><h4 id="NRZ码产生"><a href="#NRZ码产生" class="headerlink" title="NRZ码产生"></a>NRZ码产生</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//NRZ码==========================</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk_1)  <span class="hljs-comment">// 产生NRZ码 ， 学号</span><br>    <span class="hljs-keyword">if</span>(counter3 == <span class="hljs-number">4&#x27;d14</span>)<br>        <span class="hljs-keyword">begin</span><br>            counter3           &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>            out1               &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">casez</span> (counter3)<br>            <span class="hljs-comment">//000_0011_0010_0010</span><br>                <span class="hljs-number">4&#x27;d1</span> : out1    &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>                <span class="hljs-number">4&#x27;d5</span> : out1    &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>                <span class="hljs-number">4&#x27;d8</span> : out1    &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>                <span class="hljs-number">4&#x27;d9</span> : out1    &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>                <span class="hljs-keyword">default</span> : out1 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>            <span class="hljs-keyword">endcase</span><br>            counter3           &lt;= counter3 + <span class="hljs-number">1&#x27;d1</span>;<br>        <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>注意看我的学号的15位二进制码是000_0011_0010_0010，那么从右边开始，第1，5，8，9位（从0开始）都是1，在counter3的相应值处输出1即可</p><h4 id="CMI编码"><a href="#CMI编码" class="headerlink" title="CMI编码"></a>CMI编码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//CMI编码==========================</span><br><span class="hljs-keyword">reg</span> tmp                        = <span class="hljs-number">0</span>;   <br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk_2)<span class="hljs-comment">//  CMI编码</span><br>    <span class="hljs-keyword">if</span>(tmp==<span class="hljs-number">0</span>) tmp&lt;=tmp+<span class="hljs-number">1</span>;<span class="hljs-comment">//tmp的作用是为了控制时序，因为我们不应该在nrz码还没有产生的时候就开始译码</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(out1 == <span class="hljs-number">1&#x27;b0</span>)<span class="hljs-comment">//当nrz码为0时，在两个clk_2时钟周期内分别输出0和1</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span>(t0 == <span class="hljs-number">0</span>)<br>                out2           &lt;= <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span><br>                out2           &lt;= <span class="hljs-number">1</span>;<br>            t0                 &lt;=~t0;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">begin</span> <span class="hljs-comment">//当nrz码为1时，默认第一个“1”码应该译码为11</span><br>            <span class="hljs-keyword">if</span>(t1[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)<span class="hljs-comment">//2bit的t1寄存器一直在加1，当t1=00，或者01时，应该输出为1，cmi编码为11。同理，t1=10，11时，应当输出0，即cmi编码为00。</span><br><br>                out2           &lt;= <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                out2           &lt;= <span class="hljs-number">0</span>;<br>            t1                 &lt;= t1+<span class="hljs-number">2&#x27;b01</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="CMI译码"><a href="#CMI译码" class="headerlink" title="CMI译码"></a>CMI译码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//CMI译码==========================</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] tmp1                 = <span class="hljs-number">0</span>; <span class="hljs-comment">//与cmi编码的tmp作用相似，控制时序</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk_2)   <span class="hljs-comment">// CMI译码，规则：如果高低bit不同，则译码为0；高低bit相同，译码为1</span><br>   <span class="hljs-keyword">if</span>(tmp1&lt;=<span class="hljs-number">1</span>)tmp1&lt;=tmp1+<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(r11 == <span class="hljs-number">1&#x27;b0</span>)<br>        <span class="hljs-keyword">begin</span><br>            r0                 &lt;= out2;<span class="hljs-comment">//第一个bit</span><br>            out3               &lt;= (~r0 ^ r1);<br>            r11                &lt;= ~r11;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">begin</span><br>            r1                 &lt;= out2;<span class="hljs-comment">//第二个bit</span><br><br>            r11                &lt;= ~r11;<br>         <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h3><p><strong>final.v</strong></p><p>==========================</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> <span class="hljs-keyword">final</span>(clk,pin98_te3,pin99_te4,pin100_te5);<br><span class="hljs-keyword">input</span> clk ;<br><span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> pin98_te3,pin99_te4,pin100_te5;<br><br><span class="hljs-keyword">reg</span> out1                       =<span class="hljs-number">1&#x27;b0</span>,out2=<span class="hljs-number">1&#x27;b0</span>,out3=<span class="hljs-number">1&#x27;b0</span>;<span class="hljs-comment">//三个输出初始化</span><br><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] counter1             =<span class="hljs-number">4&#x27;d0</span> ;<span class="hljs-comment">//NRZ时序计数器</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] counter2             =<span class="hljs-number">2&#x27;d0</span> ;<span class="hljs-comment">//cmi码时序计数器</span><br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] counter3         =<span class="hljs-number">4&#x27;d0</span> ;<span class="hljs-comment">//学号序列输出计数器</span><br><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] t1                   = <span class="hljs-number">2&#x27;b00</span>;<br><span class="hljs-keyword">reg</span> t0                         = <span class="hljs-number">1&#x27;b0</span>;   <span class="hljs-comment">//编码变量</span><br><span class="hljs-keyword">reg</span> r0                         = <span class="hljs-number">1&#x27;b0</span>,r1 = <span class="hljs-number">1&#x27;b0</span>,r11 = <span class="hljs-number">1&#x27;b0</span>;<span class="hljs-comment">//译码变量</span><br><br><span class="hljs-keyword">reg</span> clk_1                      = <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">reg</span> clk_2                      = <span class="hljs-number">1&#x27;b0</span>;<br><br><span class="hljs-keyword">assign</span> pin98_te3               = out1;<span class="hljs-comment">//nrz码</span><br><span class="hljs-keyword">assign</span> pin99_te4               = out2;<span class="hljs-comment">//cmi编码</span><br><span class="hljs-keyword">assign</span> pin100_te5              = out3;<span class="hljs-comment">//cmi译码</span><br><span class="hljs-comment">//时钟生成==========================</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)  <span class="hljs-comment">//产生480k时钟</span><br>    <span class="hljs-keyword">if</span>(counter1 == <span class="hljs-number">3&#x27;d7</span> )<br>        <span class="hljs-keyword">begin</span><br>            counter1           &lt;= <span class="hljs-number">3&#x27;d0</span>;<br>            clk_1              &lt;= ~clk_1;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        counter1               &lt;= counter1 + <span class="hljs-number">1&#x27;d1</span>;<br><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)   <span class="hljs-comment">//产生960k时钟</span><br>    <span class="hljs-keyword">if</span>(counter2 == <span class="hljs-number">2&#x27;d3</span> )<br>        <span class="hljs-keyword">begin</span><br>            counter2           &lt;= <span class="hljs-number">2&#x27;d0</span>;<br>            clk_2              &lt;= ~clk_2;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>         counter2              &lt;= counter2 + <span class="hljs-number">1&#x27;d1</span>;<br><span class="hljs-comment">//NRZ码==========================</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk_1)  <span class="hljs-comment">// 产生NRZ码 ， 学号</span><br>    <span class="hljs-keyword">if</span>(counter3 == <span class="hljs-number">4&#x27;d14</span>)<br>        <span class="hljs-keyword">begin</span><br>            counter3           &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>            out1               &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">casez</span> (counter3)<br>            <span class="hljs-comment">//000_0011_0010_0010</span><br>                <span class="hljs-number">4&#x27;d1</span> : out1    &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>                <span class="hljs-number">4&#x27;d5</span> : out1    &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>                <span class="hljs-number">4&#x27;d8</span> : out1    &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>                <span class="hljs-number">4&#x27;d9</span> : out1    &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>                <span class="hljs-keyword">default</span> : out1 &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>            <span class="hljs-keyword">endcase</span><br>            counter3           &lt;= counter3 + <span class="hljs-number">1&#x27;d1</span>;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-comment">//CMI编码==========================</span><br><span class="hljs-keyword">reg</span> tmp                        = <span class="hljs-number">0</span>;   <br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk_2)<span class="hljs-comment">//  CMI编码</span><br><span class="hljs-keyword">if</span>(tmp==<span class="hljs-number">0</span>) tmp&lt;=tmp+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(out1 == <span class="hljs-number">1&#x27;b0</span>)<span class="hljs-comment">//当学号输出为0时</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span>(t0 == <span class="hljs-number">0</span>)<br>                out2           &lt;= <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span><br>                out2           &lt;= <span class="hljs-number">1</span>;<br>            t0                 &lt;=~t0;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span>(t1[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)<br><br>                out2           &lt;= <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                out2           &lt;= <span class="hljs-number">0</span>;<br>            t1                 &lt;= t1+<span class="hljs-number">2&#x27;b01</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br><span class="hljs-comment">//CMI译码==========================</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] tmp1                 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk_2)   <span class="hljs-comment">// CMI译码</span><br>   <span class="hljs-keyword">if</span>(tmp1&lt;=<span class="hljs-number">1</span>)tmp1&lt;=tmp1+<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(r11 == <span class="hljs-number">1&#x27;b0</span>)<br>        <span class="hljs-keyword">begin</span><br>            r0                 &lt;= out2;<br>            out3               &lt;= (~r0 ^ r1);<br>            r11                &lt;= ~r11;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">begin</span><br>            r1                 &lt;= out2;<br><br>            r11                &lt;= ~r11;<br>         <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p><strong>final_tb.v</strong></p><p>==========================</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns/1ns</span><br><br><span class="hljs-keyword">module</span> final_tb;<br>  <span class="hljs-keyword">reg</span> clk;<br>  <span class="hljs-keyword">wire</span> pin98_te3,pin99_te4,pin100_te5;<br><br>  <span class="hljs-comment">// Instantiate the module under test</span><br>  <span class="hljs-keyword">final</span> dut (<br>    <span class="hljs-variable">.clk</span>(clk),<br>    <span class="hljs-variable">.pin98_te3</span>(pin98_te3),<br>    <span class="hljs-variable">.pin99_te4</span>(pin99_te4),<br>    <span class="hljs-variable">.pin100_te5</span>(pin100_te5)<br>  );<br>  <span class="hljs-comment">// Clock generation</span><br>  <span class="hljs-keyword">always</span> #<span class="hljs-number">65</span><span class="hljs-variable">.1042</span> clk = ~clk; <span class="hljs-comment">// Assuming a 7.68MHz clock frequency (130 ns period)</span><br>  <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    <span class="hljs-comment">// Initialize inputs</span><br>    clk = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// End simulation</span><br>    <span class="hljs-comment">//$finish;</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><p><img src="res.png" alt="result"> </p>]]></content>
    
    
    
    <tags>
      
      <tag>verilog cmi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PCB最小系统板</title>
    <link href="/2023/06/01/PCB%E6%9C%80%E5%B0%8F%E7%B3%BB%E7%BB%9F%E6%9D%BF/"/>
    <url>/2023/06/01/PCB%E6%9C%80%E5%B0%8F%E7%B3%BB%E7%BB%9F%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>STM32串口大法</title>
    <link href="/2023/06/01/STM32%E4%B8%B2%E5%8F%A3%E5%A4%A7%E6%B3%95/"/>
    <url>/2023/06/01/STM32%E4%B8%B2%E5%8F%A3%E5%A4%A7%E6%B3%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>verilog之非阻塞赋值</title>
    <link href="/2023/06/01/verilog%E4%B9%8B%E9%9D%9E%E9%98%BB%E5%A1%9E%E8%B5%8B%E5%80%BC/"/>
    <url>/2023/06/01/verilog%E4%B9%8B%E9%9D%9E%E9%98%BB%E5%A1%9E%E8%B5%8B%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是非阻塞赋值"><a href="#什么是非阻塞赋值" class="headerlink" title="什么是非阻塞赋值"></a>什么是非阻塞赋值</h1><p><img src="verilog1.png" alt="非阻塞赋值介绍"></p><p><img src="women.jpg" alt="女人"></p>]]></content>
    
    
    
    <tags>
      
      <tag>verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/01/hello-world/"/>
    <url>/2023/06/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
